apply plugin: 'com.android.application'

def actionsDir = "${projectDir}/src/androidTest/java/sh/calaba/instrumentationbackend/actions"
def assetsDir = "${buildDir}/assets"
def versionFilePath = "${projectDir}/../../version"
def actionsFile = "${assetsDir}/actions"
def exampleManifestFile = "${projectDir}/../AndroidManifest.xml"
def calabashJs = "${projectDir}/../calabash-js/src/calabash.js"
def outputPath = "${buildDir}/outputs/apk/androidTest/debug/"
def apkName = "app-debug-androidTest.apk"
def serverApkName = "TestServer.apk"

android {

    // > 23, results in build errors:
    //  package android.test does not exist
    compileSdkVersion 23
    defaultConfig {
        applicationId "sh.calaba.instrumentationbackend"
        //noinspection MinSdkTooLow
        minSdkVersion 8
        // Keep this sync'd with compileSdkVersion
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 23
        // Keep this in step with the ../../version file
        // versionCode is the patch version
        versionCode 11
        versionName "0.9.11"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }

    sourceSets {
        androidTestDebug {
            assets.srcDirs += assetsDir
        }
    }
}

task addFilesToAssets {
    doLast {
        FileTree files = fileTree(actionsDir, {
            include '**/*.java'
        })

        /*
         * Transform action path, e.g. change ../java/sh/calaba/instrumentationbackend/actions/Action.java
         * to sh.calaba.instrumentationbackend.actions.Action
         */
        String regex = ".+?(java/sh/calaba/instrumentationbackend/actions/)"
        def actions = files.collect {
            file -> def actionPath = file.getPath(); actionPath.replaceAll(regex, "sh.calaba.instrumentationbackend.actions.").replaceAll(".java", "").replaceAll("/", ".")
        }

        File outputFile = new File(actionsFile)
        File outputDirectory = outputFile.getParentFile()
        outputDirectory.mkdirs()
        outputFile.createNewFile()

        println("=== Generating Action List ===")
        outputFile.withWriter {
            writer ->
                actions.each {
                    action -> writer.writeLine action
                    println(action)
                }
        }

        println("=== Adding Additional Assets ===")
        println("Adding ${exampleManifestFile}")
        exec {
            commandLine "cp", "${exampleManifestFile}", "${assetsDir}"
        }
        println("Adding ${calabashJs}")
        exec {
            commandLine "cp", "${calabashJs}", "${assetsDir}"
        }
        println("Adding ${versionFilePath}")
        exec {
            commandLine "cp", "${versionFilePath}", "${assetsDir}"
        }
    }
}

task prepareApk {
    doLast {
        def apk = "${outputPath}${apkName}"
        def server = "${outputPath}${serverApkName}"

        println("Stripping signature and manifest from server apk...")

        exec {
            commandLine "zip", "-q", "-d", "${apk}", "META-INF/*"
        }
        exec {
            commandLine "zip", "-q", "-d", "${apk}", "AndroidManifest.xml"
        }

        exec {
            commandLine "rm", "-f", "${server}"
        }

        exec {
            commandLine "cp", "${apk}", "${server}"
        }


        println("Done building.")
        println("Verifying the apk...")


        def tmpDir = new File("../../tmp/verify-apk")
        tmpDir.delete()
        tmpDir.mkdirs()

        ant.unzip(src: "${server}", dest: tmpDir.absolutePath)
        def files = []

        // 'it' is a string until it is added to files, then it is a File
        tmpDir.traverse(type: groovy.io.FileType.FILES) { files.add(it) }
        files = files.collect { it.path }

        def counter = 0
        println "=== Files in APK =="
        files.each {
            println "${it}"
            counter = counter + 1
        }
        println "=== END =="

        if (counter != 10) {
            def message = "Expected 10 files in ${serverApkName} - found ${files.count}"

            throw new GradleException(message)
        }

        ["resources.arsc",
         "junit/runner/logo.gif",
         "junit/runner/smalllogo.gif",
         "classes.dex",
         "LICENSE-junit.txt",
         "assets/calabash.js",
         "assets/AndroidManifest.xml",
         "assets/version",
         "assets/actions",
         "com/jayway/android/robotium/solo/RobotiumWeb.js"].collect {
            "${tmpDir.path}/${it}".toString()
        }.each {
            if (!files.contains(it)) {
                println("${it.class}")
                throw new GradleException("Expected to find ${it} in apk")
            }
        }

        exec {
            commandLine "cp", "${server}", "../.."
        }
        println("Done verifying!")
        println("Staged a copy of TestServer.apk to the root directory of this repository")
    }
}

tasks.matching { task ->
    task.name.startsWith('compile')
}.all { task ->
    task.dependsOn(["addFilesToAssets"])
}

assembleAndroidTest.finalizedBy(prepareApk)

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation 'net.sourceforge.jadex:jadex-android-antlr:2.2'
    androidTestImplementation 'com.jayway.android.robotium:robotium-solo:4.3.1'

    //noinspection GradleDependency
    androidTestImplementation 'com.android.support.test:runner:0.4'
}
